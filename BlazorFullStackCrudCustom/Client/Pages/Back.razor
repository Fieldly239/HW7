@page "/back"
@page "/back/{id:int}"
@inject IFeedBackService FeedBackService
@if (Id == null)
{
    <PageTitle>Create a new FeedBack</PageTitle>
    <h3>Create a new FeedBack</h3>
}
else
{
    <PageTitle>Edit @back.Appilcation.Name</PageTitle>
    <h3>Edit @back.Appilcation.Name</h3>
}
<EditForm Model="back" OnSubmit="HandleSubmit">
    <div>
        <label>Appilcation</label><br />
        <InputSelect @bind-Value="back.AppilcationId" class="form-select">
            @foreach (var apps in FeedBackService.Appilcations)
            {
                <option value="@apps.Id">@apps.Name</option>
            }
        </InputSelect>
    </div>
    <div>
        <label for="description">Description</label>
        <InputText id="description" @bind-Value="back.Description" class="form-control"></InputText>
    </div>
    <div>
        <label>Vote</label><br />
        <InputSelect @bind-Value="back.VoteId" class="form-select">
            @foreach (var vote in FeedBackService.Votes)
            {
                <option value="@vote.Id">@vote.Name</option>
            }
        </InputSelect>
    </div>
    <br />
    <button typeof="submit" class="btn btn-primary">@btnText</button>
    <button typeof="button" class="btn btn-danger" @onclick="DeleteFeedBack">Delete FeedBack</button>
    
</EditForm>


@code {
    [Parameter]
    public int? Id { get; set; }
    string btnText = string.Empty;
    FeedBack back = new FeedBack { Vote = new Vote() };

    protected override async Task OnInitializedAsync()
    {
        btnText = Id == null ? "Save New FeedBack" : "Update FeedBack";
        await FeedBackService.GetVotes();
        await FeedBackService.GetAppilcations();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id == null)
        {
            back.Vote = FeedBackService.Votes[0];
            back.VoteId = back.Vote.Id;
        }
        else
        {
            back = await FeedBackService.GetSingleBack((int)Id);
        }
    }

    async Task HandleSubmit()
    {
        if (Id == null)
        {
            await FeedBackService.CreateFeedBack(back);
        }
        else
        {
            await FeedBackService.UpdateFeedBack(back);
        }
    }

    async Task DeleteFeedBack()
    {
        await FeedBackService.DeleteFeedBack(back.Id);
    }
}

